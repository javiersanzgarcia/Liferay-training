/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.jsanz.library.model.impl;

import com.jsanz.library.model.Library;
import com.jsanz.library.model.LibraryModel;
import com.jsanz.library.model.LibrarySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Library service. Represents a row in the &quot;JAVI_Library&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LibraryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LibraryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LibraryImpl
 * @generated
 */
@JSON(strict = true)
public class LibraryModelImpl
	extends BaseModelImpl<Library> implements LibraryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a library model instance should use the <code>Library</code> interface instead.
	 */
	public static final String TABLE_NAME = "JAVI_Library";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"ISBN", Types.BIGINT},
		{"title", Types.VARCHAR}, {"writer", Types.VARCHAR},
		{"publication", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ISBN", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("writer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publication", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table JAVI_Library (uuid_ VARCHAR(75) null,ISBN LONG not null primary key,title VARCHAR(75) null,writer VARCHAR(75) null,publication DATE null)";

	public static final String TABLE_SQL_DROP = "drop table JAVI_Library";

	public static final String ORDER_BY_JPQL = " ORDER BY library.ISBN ASC";

	public static final String ORDER_BY_SQL = " ORDER BY JAVI_Library.ISBN ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long PUBLICATION_COLUMN_BITMASK = 1L;

	public static final long TITLE_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long WRITER_COLUMN_BITMASK = 8L;

	public static final long ISBN_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Library toModel(LibrarySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Library model = new LibraryImpl();

		model.setUuid(soapModel.getUuid());
		model.setISBN(soapModel.getISBN());
		model.setTitle(soapModel.getTitle());
		model.setWriter(soapModel.getWriter());
		model.setPublication(soapModel.getPublication());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Library> toModels(LibrarySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Library> models = new ArrayList<Library>(soapModels.length);

		for (LibrarySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public LibraryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ISBN;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setISBN(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ISBN;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Library.class;
	}

	@Override
	public String getModelClassName() {
		return Library.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Library, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Library, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Library, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Library)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Library, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Library, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Library)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Library, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Library, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Library>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Library.class.getClassLoader(), Library.class, ModelWrapper.class);

		try {
			Constructor<Library> constructor =
				(Constructor<Library>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Library, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Library, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Library, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Library, Object>>();
		Map<String, BiConsumer<Library, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Library, ?>>();

		attributeGetterFunctions.put("uuid", Library::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Library, String>)Library::setUuid);
		attributeGetterFunctions.put("ISBN", Library::getISBN);
		attributeSetterBiConsumers.put(
			"ISBN", (BiConsumer<Library, Long>)Library::setISBN);
		attributeGetterFunctions.put("title", Library::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Library, String>)Library::setTitle);
		attributeGetterFunctions.put("writer", Library::getWriter);
		attributeSetterBiConsumers.put(
			"writer", (BiConsumer<Library, String>)Library::setWriter);
		attributeGetterFunctions.put("publication", Library::getPublication);
		attributeSetterBiConsumers.put(
			"publication", (BiConsumer<Library, Date>)Library::setPublication);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getISBN() {
		return _ISBN;
	}

	@Override
	public void setISBN(long ISBN) {
		_ISBN = ISBN;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getWriter() {
		if (_writer == null) {
			return "";
		}
		else {
			return _writer;
		}
	}

	@Override
	public void setWriter(String writer) {
		_columnBitmask |= WRITER_COLUMN_BITMASK;

		if (_originalWriter == null) {
			_originalWriter = _writer;
		}

		_writer = writer;
	}

	public String getOriginalWriter() {
		return GetterUtil.getString(_originalWriter);
	}

	@JSON
	@Override
	public Date getPublication() {
		return _publication;
	}

	@Override
	public void setPublication(Date publication) {
		_columnBitmask |= PUBLICATION_COLUMN_BITMASK;

		if (_originalPublication == null) {
			_originalPublication = _publication;
		}

		_publication = publication;
	}

	public Date getOriginalPublication() {
		return _originalPublication;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Library.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Library toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Library>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LibraryImpl libraryImpl = new LibraryImpl();

		libraryImpl.setUuid(getUuid());
		libraryImpl.setISBN(getISBN());
		libraryImpl.setTitle(getTitle());
		libraryImpl.setWriter(getWriter());
		libraryImpl.setPublication(getPublication());

		libraryImpl.resetOriginalValues();

		return libraryImpl;
	}

	@Override
	public int compareTo(Library library) {
		long primaryKey = library.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Library)) {
			return false;
		}

		Library library = (Library)object;

		long primaryKey = library.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		LibraryModelImpl libraryModelImpl = this;

		libraryModelImpl._originalUuid = libraryModelImpl._uuid;

		libraryModelImpl._originalTitle = libraryModelImpl._title;

		libraryModelImpl._originalWriter = libraryModelImpl._writer;

		libraryModelImpl._originalPublication = libraryModelImpl._publication;

		libraryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Library> toCacheModel() {
		LibraryCacheModel libraryCacheModel = new LibraryCacheModel();

		libraryCacheModel.uuid = getUuid();

		String uuid = libraryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			libraryCacheModel.uuid = null;
		}

		libraryCacheModel.ISBN = getISBN();

		libraryCacheModel.title = getTitle();

		String title = libraryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			libraryCacheModel.title = null;
		}

		libraryCacheModel.writer = getWriter();

		String writer = libraryCacheModel.writer;

		if ((writer != null) && (writer.length() == 0)) {
			libraryCacheModel.writer = null;
		}

		Date publication = getPublication();

		if (publication != null) {
			libraryCacheModel.publication = publication.getTime();
		}
		else {
			libraryCacheModel.publication = Long.MIN_VALUE;
		}

		return libraryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Library, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Library, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Library, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Library)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Library, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Library, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Library, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Library)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Library>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;

	private long _ISBN;

	private String _title;
	private String _originalTitle;
	private String _writer;
	private String _originalWriter;
	private Date _publication;
	private Date _originalPublication;
	private long _columnBitmask;
	private Library _escapedModel;

}